{"version":3,"sources":["Ui/ErrorMessage/ErrorMessage.module.css","Ui/Preloader/Preloader.module.css","Ui/Movie.tsx","Api/api.ts","Redux/appReducer.ts","Redux/moviesReducer.ts","Ui/Preloader/Preloader.tsx","Ui/ErrorMessage/ErrorMessage.tsx","Ui/InputField/InputField.tsx","App.tsx","reportWebVitals.ts","Redux/store.ts","index.tsx"],"names":["module","exports","Movie","props","vote","className","src","poster","alt","title","year","rating","description","href","imdbId","target","instance","axios","create","baseURL","initialState","isLoading","isError","statusGetFilms","setStatusLoadingAC","isLoad","type","setErrorStatusAC","setStatusGetFilms","statusResponse","thunkSetMovies","dispatch","get","movieAPI","then","res","movies","data","Error","catch","Preloader","style","loader","ErrorMessage","useState","open","setOpen","container","id","errorBox","face2","eye","right","mouth","sad","shadow","move","message","alert","buttonBox","onClick","red","InputField","placeholder","disabled","value","inputValue","onChange","onChangeInputValue","onKeyPress","event","key","onClickHandler","App","useDispatch","useSelector","state","Poster","Plot","Title","imdbRating","app","status","Year","imbdId","imdbID","titleInput","setTitleInput","yearInput","setYearInput","e","currentTarget","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","actions","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d31b9bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ErrorMessage_container__3ddtW\",\"green\":\"ErrorMessage_green__3WOMM\",\"red\":\"ErrorMessage_red__347li\",\"alert\":\"ErrorMessage_alert__3hXJT\",\"dot\":\"ErrorMessage_dot__2lGOg\",\"errorBox\":\"ErrorMessage_errorBox__3jReV\",\"two\":\"ErrorMessage_two__1mzOr\",\"face\":\"ErrorMessage_face__1fj6O\",\"bounce\":\"ErrorMessage_bounce__TNv5A\",\"face2\":\"ErrorMessage_face2__1kdZn\",\"roll\":\"ErrorMessage_roll__2f48c\",\"eye\":\"ErrorMessage_eye__2ZMvq\",\"right\":\"ErrorMessage_right__3LhXI\",\"mouth\":\"ErrorMessage_mouth__Qp5sZ\",\"happy\":\"ErrorMessage_happy__k84LP\",\"sad\":\"ErrorMessage_sad__30eac\",\"shadow\":\"ErrorMessage_shadow__2_IMi\",\"scale\":\"ErrorMessage_scale__gAiG7\",\"move\":\"ErrorMessage_move__w9VQ3\",\"message\":\"ErrorMessage_message__QlJff\",\"buttonBox\":\"ErrorMessage_buttonBox__2BIkE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__1MhQM\",\"rotating\":\"Preloader_rotating__2faIN\"};","import React from 'react';\r\n\r\ntype MoviePropsType = {\r\n    poster: string\r\n    title: string\r\n    rating: string\r\n    description: string\r\n    year: string\r\n    imdbId: string\r\n}\r\n\r\nconst Movie = (props: MoviePropsType) => {\r\n\r\n    const getClassByRate = (vote: string) => {\r\n        if (+vote >= 7.5) return \"green\";\r\n        else if (+vote >= 7) return \"orange\";\r\n        else return \"red\";\r\n    };\r\n\r\n    return <div className=\"movie\">\r\n        <img src={props.poster} alt={props.title}/>\r\n        <div className=\"movie-info\">\r\n            <h3>{props.title}   </h3>\r\n            <div className={'test'}><span> Year : {props.year} </span>\r\n                <span className={getClassByRate(props.rating)}>{props.rating}</span>\r\n            </div>\r\n        </div>\r\n        <div className=\"overview\">\r\n            <h3>Overview</h3>\r\n            {props.description}\r\n            <a href={`https://www.imdb.com/title/${props.imdbId}/`} target={'blank'} className=\"rainbow rainbow-1\">Watch </a>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default Movie;","import axios from \"axios\";\r\n\r\nexport type RatingResponseType = {\r\n    Source: string\r\n    Value: string\r\n}\r\n\r\nexport type ResponseType = {\r\n    Actors: string\r\n    Awards: string\r\n    BoxOffice: string\r\n    Country: string\r\n    DVD: string\r\n    Director: string\r\n    Genre: string\r\n    Language: string\r\n    Metascore: string\r\n    Plot: string\r\n    Poster: string\r\n    Production: string\r\n    Rated: string\r\n    Ratings: RatingResponseType[]\r\n    Released: string\r\n    Response: string\r\n    Runtime: string\r\n    Title: string\r\n    Type: string\r\n    Website: string\r\n    Writer: string\r\n    Year: string\r\n    imdbID: string\r\n    imdbRating: string\r\n    imdbVotes: string\r\n    Error: string\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://www.omdbapi.com/\",\r\n})\r\n\r\nconst apiKey = '?apikey=fbf45cd4'\r\n\r\nexport const movieAPI = () => {\r\n    return {\r\n        getByTitle: (title: string, year?: string) => {\r\n            return instance.get<ResponseType>(`${apiKey}&t=${title}&y=${year}`)\r\n        }\r\n    }\r\n}","type InitialStateType = {\r\n    isLoading: boolean\r\n    isError: string | null\r\n    statusGetFilms: 'success' | 'loading' | 'failed' | 'idle'\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoading: false,\r\n    isError:null,\r\n    statusGetFilms: \"idle\"\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setStatusLoadingAC> | ReturnType<typeof setErrorStatusAC> | ReturnType<typeof setStatusGetFilms>\r\n\r\nexport const appReducer = (state = initialState, actions: ActionsType): InitialStateType => {\r\n    switch (actions.type) {\r\n        case \"STATUS-LOADING\":\r\n            return {...state, isLoading: actions.isLoad}\r\n        case \"STATUS-ERROR\":\r\n            return {...state, isError: actions.isError}\r\n        case \"SET-STATUS-GET-FILMS\":\r\n            return {...state, statusGetFilms:actions.statusResponse}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const setStatusLoadingAC = (isLoad: boolean) => ({type: 'STATUS-LOADING', isLoad} as const)\r\nexport const setErrorStatusAC = (isError: string | null) => ({type: 'STATUS-ERROR', isError} as const)\r\nexport const setStatusGetFilms = ( statusResponse: 'success' | 'loading' | 'failed' | 'idle') => ({type: 'SET-STATUS-GET-FILMS', statusResponse} as const)","import {movieAPI, ResponseType} from '../Api/api'\r\nimport {Dispatch} from \"redux\";\r\nimport {setErrorStatusAC, setStatusGetFilms, setStatusLoadingAC} from \"./appReducer\";\r\n\r\nconst initialState: ResponseType = {} as ResponseType\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof setMoviesAC>\r\n    | ReturnType<typeof setStatusLoadingAC>\r\n    | ReturnType<typeof setErrorStatusAC>\r\n    | ReturnType<typeof setStatusGetFilms>\r\n\r\nexport const moviesReducer = (state: ResponseType = initialState, actions: ActionsType): ResponseType => {\r\n    switch (actions.type) {\r\n        case \"SET-MOVIES\":\r\n            return {...state, ...actions.movies}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nconst setMoviesAC = (movies: ResponseType) => ({type: 'SET-MOVIES', movies} as const)\r\n\r\nexport const thunkSetMovies = (title: string, year?:string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setStatusLoadingAC(true))\r\n    dispatch(setStatusGetFilms('loading'))\r\n    movieAPI().getByTitle(title, year)\r\n        .then((res) => {\r\n            dispatch(setStatusGetFilms('success'))\r\n            dispatch(setMoviesAC(res.data))\r\n            dispatch(setStatusLoadingAC(false))\r\n            if (res.data.Error) {\r\n                dispatch(setStatusGetFilms('failed'))\r\n                dispatch(setErrorStatusAC(res.data.Error))\r\n            }\r\n\r\n        })\r\n        .catch(() => {\r\n            dispatch(setStatusGetFilms('failed'))\r\n            dispatch(setErrorStatusAC('Какая-то неведанная ошибка'))\r\n        })\r\n\r\n}","import React from 'react';\r\nimport style from './Preloader.module.css'\r\n\r\nconst Preloader = () => {\r\n    return <div className={style.loader}>\r\n        <span>Loading...</span>\r\n    </div>\r\n};\r\n\r\nexport default Preloader;","import React, {useState} from 'react';\r\nimport style from './ErrorMessage.module.css'\r\n\r\ntype ErrorMessagePropsType = {\r\n    isError:string | null\r\n}\r\n\r\nconst ErrorMessage = (props:ErrorMessagePropsType) => {\r\n\r\n    const [open, setOpen] = useState<boolean>(true)\r\n\r\n    return open ? <div className={style.container}>\r\n            <div id=\"error-box\" className={style.errorBox}>\r\n                <div className={style.face2}>\r\n                    <div className={style.eye}/>\r\n                    <div className={`${style.eye} ${style.right}`}/>\r\n                    <div className={`${style.mouth} ${style.sad}`}/>\r\n                </div>\r\n                <div className={`${style.shadow} ${style.move}`}/>\r\n                <div className={style.message}><h1 className={style.alert}>{props.isError}</h1></div>\r\n                <button className={style.buttonBox} onClick={() => setOpen(false)}><h1 className={style.red}>Close</h1></button>\r\n            </div>\r\n        </div>\r\n        : null\r\n};\r\n\r\nexport default ErrorMessage;","import React, {ChangeEvent} from \"react\";\r\n\r\ntype TitleFieldPropsType = {\r\n    isLoading: boolean\r\n    inputValue: string\r\n    onChangeInputValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onClickHandler: () => void\r\n}\r\nexport const InputField = (props: TitleFieldPropsType) => {\r\n    return <input type=\"text\" placeholder=\"Title\"\r\n                  disabled={props.isLoading}\r\n                  value={props.inputValue}\r\n                  className=\"search\"\r\n                  onChange={props.onChangeInputValue}\r\n                  onKeyPress={(event => {\r\n                      if (event.key === 'Enter') props.onClickHandler()\r\n                  })}/>\r\n\r\n}","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport Movie from \"./Ui/Movie\";\nimport {thunkSetMovies} from \"./Redux/moviesReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootStoreType} from \"./Redux/store\";\nimport Preloader from \"./Ui/Preloader/Preloader\";\nimport ErrorMessage from \"./Ui/ErrorMessage/ErrorMessage\";\nimport {InputField} from \"./Ui/InputField/InputField\";\n\n\nfunction App() {\n    const dispatch = useDispatch()\n\n    const poster = useSelector<RootStoreType, string>(state => state.movies.Poster)\n    const description = useSelector<RootStoreType, string>(state => state.movies.Plot)\n    const title = useSelector<RootStoreType, string>(state => state.movies.Title)\n    const rating = useSelector<RootStoreType, string>(state => state.movies.imdbRating)\n    const isLoading = useSelector<RootStoreType, boolean>(state => state.app.isLoading)\n    const isError = useSelector<RootStoreType, string | null>(state => state.app.isError)\n    const status = useSelector<RootStoreType, string>(state => state.app.statusGetFilms)\n    const year = useSelector<RootStoreType, string>(state => state.movies.Year)\n    const imbdId = useSelector<RootStoreType, string>(state => state.movies.imdbID)\n    const [titleInput, setTitleInput] = useState<string>('')\n    const [yearInput, setYearInput] = useState<string>('')\n\n\n    const onClickHandler = () => {\n        dispatch(thunkSetMovies(titleInput, yearInput))\n        setTitleInput('')\n        setYearInput('')\n    }\n\n    const onChangeInputValue = (e: ChangeEvent<HTMLInputElement>) => setTitleInput(e.currentTarget.value)\n    const onChangeYear = (e: ChangeEvent<HTMLInputElement>) => setYearInput(e.currentTarget.value)\n\n    return <div>\n        {isLoading ? <Preloader/> : null}\n        <header>\n            <h1>OMDb API</h1>\n            <InputField isLoading={isLoading} onChangeInputValue={onChangeInputValue} onClickHandler={onClickHandler} inputValue={titleInput}/>\n            <InputField isLoading={isLoading} onChangeInputValue={onChangeYear} onClickHandler={onClickHandler} inputValue={yearInput}/>\n            <a className=\"rainbow rainbow-5\" onClick={onClickHandler}>Search</a>\n        </header>\n        <main id=\"main\">\n            {status === 'success' ? <Movie description={description} title={title} poster={poster} rating={rating} year={year} imdbId={imbdId}/> : null}\n        </main>\n        {status === 'failed' ? <ErrorMessage isError={isError}/> : null}\n        <footer className=\"footer\">\n            <p> Use This <a href=\"http://www.omdbapi.com/\" target={'blank'}> API</a></p>\n        </footer>\n    </div>\n\n}\n\n\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {moviesReducer} from \"./moviesReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./appReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    movies: moviesReducer,\r\n    app:appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootStoreType = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}